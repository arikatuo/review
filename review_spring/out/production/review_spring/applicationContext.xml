<?xml version="1.0" encoding="UTF-8"?>
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 配置需要被Spring管理的Bean（创建，创建后放在了Spring IOC容器里面）-->
    <bean id="hello" class="com.hy.java.HelloWorld" scope="session">
        <!-- 配置该Bean需要注入的属性（是通过属性set方法来注入的） -->
        <property name="info" value="Happy New Year!"/>
    </bean>


    <bean id="stu1" name="stu1" class="com.hy.model.Stu1" >
        <constructor-arg>
            <value>韩懿帅逼</value>
        </constructor-arg>
        <constructor-arg>
            <value>男</value>
        </constructor-arg>
        <constructor-arg>
            <value>21</value>
        </constructor-arg>
    </bean>

    <bean id="moniter" name="moniter" class="com.hy.model.Moniter">
        <property name="sex" value="女"/>

        <property name="age" value="21"/>
        <property name="name" value="李燕女士"/>
    </bean>

    <bean id="school" class="com.hy.model.School">
        <!--List 注入例子 -->
        <property name="listStu">
            <list>
                <ref bean="moniter"/>  <!--使用上面已定义好的bean -->
                <!--<ref bean="moniter"/>  &lt;!&ndash;使用上面已定义好的bean &ndash;&gt;-->
                <ref bean="stu1"/>     <!--使用上面已定义好的bean -->
                <bean class="com.hy.model.Moniter"> <!--定义学生匿名内部类，用setter方法注入 -->
                    <property name="age" value="20"/>
                    <property name="name" value="阿屁"/>
                    <property name="sex" value="男"/>
                </bean>
                <value>1</value>
                <value>hello</value>
            </list>
        </property>

        <!--set 注入例子 -->
        <property name="setStu">
            <set>
                <ref bean="moniter"/>  <!--使用上面已定义好的bean -->
                <ref bean="stu1"/>     <!--使用上面已定义好的bean -->
                <ref bean="stu1"/>     <!--使用上面已定义好的bean -->
                <bean class="com.hy.model.Stu1"> <!--定义学生匿名内部类，用constructor方法注入 -->
                    <constructor-arg value="大平" index="0"></constructor-arg>
                    <constructor-arg value="男" index="1"></constructor-arg>
                    <constructor-arg value="10" index="2"></constructor-arg>
                </bean>
                <value>333333</value>
                <value>Evankaka</value>
            </set>
        </property>

        <!--map 注入例子 -->
        <property name="mapStu">
            <map>
                <entry key="key1">
                    <ref bean="moniter"/>  <!--使用上面已定义好的bean -->
                </entry>
                <entry key="key2">
                    <bean class="com.hy.model.Moniter" > <!--定义学生匿名内部类，用setter方法注入 -->
                        <property name="age" value="80"/>
                        <property name="name" value="小王"/>
                        <property name="sex" value="男"/>
                    </bean>
                </entry>
                <entry key="key3">
                    <value>student2</value>
                </entry>
                <entry key="key4">
                    <value>56</value>
                </entry>

            </map>

        </property>

    </bean>

    <bean id="students" class="com.hy.model.Students">
        <property name="ID" value="1"/>
        <property name="name" value="a"/>
        <property name="age" value="1"/>
        <property name="sex" value="男"/>
    </bean>

    <bean id="teacher" class="com.hy.model.Teacher">
        <property name="ID">
            <value>1</value>
        </property>

        <property name="name" value="b"/>
        <property name="age" value="2"/>
        <property name="sex" value="男"/>

    </bean>

    <bean id="teachFile1" class="com.hy.model.TeachFile">
        <property name="students" ref="students"/>
        <property name="teacher" ref="teacher"/>
    </bean>

    <bean id="teachFile2" class="com.hy.model.TeachFile" autowire="byName"/>

    <bean id="teachFile3" class="com.hy.model.TeachFile" autowire="byType"/>

    <bean id="teachFile4" class="com.hy.model.TeachFile" autowire="constructor"/>

    <bean  id="personService" class="com.hy.model.PersonService" scope="singleton" init-method="init"
          destroy-method="cleanUp">

    </bean>

    <context:component-scan base-package="com.hy.model"/>
    <!--<context:annotation-config />-->


    <!--<bean id="babyPerson" class="com.hy.model.BabyPerson"/>   &lt;!&ndash; 被增强的bean &ndash;&gt;-->
    <!--<bean id="adviceAspect" class="com.hy.model.AdivceMethod"/>   &lt;!&ndash; 增强方法的bean &ndash;&gt;-->

    <bean id="babyPerson" class="com.hy.model.BabyPerson"/>
    <bean id="adviceAspect" class="com.hy.model.AdivceMethod"/>

    <aop:config >
        <!--<aop:pointcut id="pointcut" expression="execution(* com.hy.model.BabyPerson.*(..))"/>-->
        <aop:aspect ref="adviceAspect">
            <aop:before method="beforeEat" pointcut="execution(* com.hy.model.BabyPerson.eatLunch(..))"/>
            <aop:after method="afterEat" pointcut="execution(* com.hy.model.BabyPerson.eatLunch(..))"/>
            <aop:around method="aroundEat" pointcut="execution(* com.hy.model.BabyPerson.eatSupper(..))"/>
        </aop:aspect>
    </aop:config>


    <!--<aop:config proxy-target-class="true">-->
    <!--<aop:pointcut id="pointcut" expression="execution(* com.hy.model.BabyPerson.*(..))"/>  &lt;!&ndash; 定义切点 &ndash;&gt;-->
    <!--<aop:aspect ref="adviceAspect">  &lt;!&ndash; 定义切面 &ndash;&gt;-->
    <!--<aop:before method="beforeEat" pointcut-ref="pointcut"/>  &lt;!&ndash; 定义前置增强方法 &ndash;&gt;-->
    <!--<aop:after method="afterEat"-->
    <!--pointcut="execution(* com.hy.model.BabyPerson.eatLunch(..))"/>&lt;!&ndash;定义后置增加，使用匿名切点  &ndash;&gt;-->
    <!--<aop:around method="aroundEat"-->
    <!--pointcut="execution(* com.hy.model.BabyPerson.eatSupper(..))"/>&lt;!&ndash;定义后置增加，使用匿名切点  &ndash;&gt;-->
    <!--</aop:aspect>-->
    <!--</aop:config>-->

    <aop:aspectj-autoproxy  />





    <!-- 配置数据源 -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/spring_test" />
        <property name="username" value="root" />
        <property name="password" value="1996" />
    </bean>
    <!--配置一个JdbcTemplate实例，并将这个“共享的”，“安全的”实例注入到不同的DAO类中去 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 声明事务管理器 -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 需要实施事务增强的目标业务Bean -->
    <bean id="libraryTarget" class="com.hy.model.LibraryDaoImpl"
          p:jdbcTemplate-ref="jdbcTemplate" />

    <!-- 使用事务代理工厂类为目标业务Bean提供事务增强 -->
    <bean id="libraryFactory" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
          p:transactionManager-ref="txManager"
          p:target-ref="libraryTarget">
        <!-- 事务属性配置 -->
        <property name="transactionAttributes">
            <props>
                <!-- 以get开头的方法采用只读型事务控制类型 -->
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
                <!-- 所有方法均进行事务控制，如果当前没有事务，则新建一个事务 -->
                <prop key="addBook">PROPAGATION_REQUIRED</prop>
            </props>
        </property>

    </bean>


</beans>